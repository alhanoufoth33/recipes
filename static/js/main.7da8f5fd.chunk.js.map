{"version":3,"sources":["form.js","recipes.js","App.js","recipe.js","router.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","getRecipe","style","marginBottom","className","type","placeholder","name","Recipes","recipes","map","recipe","key","title","src","image_url","alt","length","concat","substring","publisher","react_router_dom","to","pathname","recipe_id","state","API_KEY","App","_callee","e","recipeName","API_call","data","regenerator_default","wrap","_context","prev","next","target","elements","value","preventDefault","fetch","sent","json","_this","setState","console","log","stop","src_form","this","Component","Recipe","activeRecipe","componentDidMount","req","res","location","href","publisher_url","React","Router","react_router","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7da8f5fd.chunk.js","sourcesContent":["import React  from 'react'\n\nconst Form = props => (\n\n<form onSubmit={props.getRecipe} style={{ marginBottom:\"2rem\" }} >\n<input   className=\"form_input\" type=\"text\" placeholder=\"yummy recipes...\" name=\"recipeName\"/>\n<button className=\"form_button\" >Search  </button>\n</form>\n\n);\n\nexport default Form;\n","import React from 'react';\n\nimport { Link } from \"react-router-dom\";\n\nconst Recipes = props => (\n  <div className=\"container\">\n    <div className=\"row\">\n    { props.recipes.map((recipe) => {\n      return (\n        <div key={recipe.title} className=\"col-md-4\" style={{ marginBottom:\"2rem\" }}>\n          <div className=\"recipes__box\">\n            <img \n              className=\"recipe__box-img\" \n              src={recipe.image_url} \n              alt={recipe.title}/>\n              <div className=\"recipe__text\">\n                <h5 className=\"recipes__title\">\n                  { recipe.title.length < 20 ? `${recipe.title}` : `${recipe.title.substring(0, 25)}...` }\n                </h5>\n                <p className=\"recipes__subtitle\">Publisher: <span>\n                  { recipe.publisher }\n                </span></p>\n              </div>\n              <button className=\"recipe_buttons\">\n                <Link to={{ \n                  pathname: `/recipe/${recipe.recipe_id}`,\n                  state: { recipe: recipe.title }\n                }}>View Recipe</Link>\n              </button>\n          </div>\n        </div>\n      );\n    })}\n    </div>\n  </div>\n);\n\nexport default Recipes;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './form';\nimport Recipes from './recipes';\nconst API_KEY = \"3d5af0e61aa8ced2ac7204d650c5e73d\";\nclass App extends Component {\n  \n  state = {\n      recipes:[]\n  }\n  getRecipe =async(e)  => {\n    const recipeName = e.target.elements.recipeName.value;\n    //e.target.elements.recipeName.value;\n    e.preventDefault();\n    const API_call = await fetch(`https://cors-anywhere.herokuapp.com/http://food2fork.com/api/search?key=${API_KEY}&q=${recipeName}&count=12`);\n    \n    const data = await API_call.json();\n    this.setState({recipes:data.recipes});\n    console.log(this.state.recipes);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        </header>\n        \n        <Form getRecipe={this.getRecipe}/>\n        <Recipes recipes={this.state.recipes} />\n           \n       \n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\n\nimport { Link } from \"react-router-dom\";\n\nconst API_KEY = \"3d5af0e61aa8ced2ac7204d650c5e73d\";\n\nclass Recipe extends React.Component {\n  state = {\n    activeRecipe: []\n  }\n  componentDidMount = async () => {\n    const title = this.props.location.state.recipe;\n    const req = await fetch(`https://cors-anywhere.herokuapp.com/http://food2fork.com/api/search?key=${API_KEY}&q=${title}`);\n    \n    const res = await req.json();\n    this.setState({ activeRecipe: res.recipes[0] });\n    console.log(this.state.activeRecipe);\n  }\n  render() {\n    const recipe = this.state.activeRecipe;\n    return (\n      <div className=\"container\">\n        { this.state.activeRecipe.length !== 0 &&\n          <div className=\"active-recipe\">\n            <img className=\"active-recipe__img\" src={recipe.image_url} alt={recipe.title}/>\n            <h3 className=\"active-recipe__title\">{ recipe.title }</h3>\n            <h4 className=\"active-recipe__publisher\">\n              Publisher: <span>{ recipe.publisher }</span>\n            </h4>\n            <p className=\"active-recipe_website\">Website: \n              <span><a href={recipe.publisher_url}>{recipe.publisher_url}</a></span>\n            </p>\n            <button className=\"active-recipe_button\">\n              <Link to=\"/\">Go Home</Link>\n            </button>\n          </div>\n        }\n      </div>\n    );\n  }\n};\n\nexport default Recipe;","import React from 'react';\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport Recipe from \"./recipe\";\n\nconst Router = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route path=\"/\" component={App} exact />\n      <Route path=\"/recipe/:id\" component={Recipe} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Router;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Router from './router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}